・ビヘイビアツリーを使用した、エネミーAI
セレクターやシークエンスの一つ目のノードに条件や設定用のノードを置くように。
それにより大まかな条件式は一つ目のノードで、細かな条件式をそれぞれのタスクでやることで一つのCPPに同じ条件文を書かなくて良くなる。
また、処理や条件の順番を修正する時などに、ノード配置を変えるだけで済むようになる。
タスクの子にタスクを配置できるようにし、攻撃パターンが変わってないように見せつつ、別パターンの攻撃ができる。

・GPUスキニング
頂点シェーダーで頂点計算の際、コンスタントバッファでボーンとウェイトを頂点情報と一緒に送り、別のコンスタントバッファで送ったボーンマトリクスと一緒に計算し、そのままピクセルシェーダーへ伝える。
送った情報を元にスキニングの計算をシェーダーで行うことで、CPUへの負荷が減り、処理効率が上昇。
30FPS～50FPS→160FPS 程度までフレームレートが上昇
※スペック、「CPU：AMD Ryzen 7 3700X」「GPU：GeForceRTX3060」

・詳細な当たり判定
エネミーのボーンに、複数のOBBの当たり判定を付けることで、詳細な当たり判定を実現。

・OBBの当たり判定
OBBとOBBの当たり判定を取れるように
オブジェクトの読み込みの際に、オブジェクト自体のスケールを取得して計算しているため、Y軸の原点が下にあっても当たり判定がずれないように。

・CSVでのデータ読み込み
CSVに書かれているプレイヤーとエネミーのステータスやスキルなどのデータを反映できるようにし、調整をしやすく。

・マルチスレッドを使用したロード
マルチスレッドを使用して、ロードでも画面が止まらないように。

・圧縮テクスチャを使用したメッシュフィールド
GIMPで.ddsファイルとして出力した画像を読み込むようにしました。フィールドに使用すテイルテクスチャの解像度が高いので、GPUパイプラインへの負荷がかなり軽減される。